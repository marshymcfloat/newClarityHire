generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  id_token          String?
  expires_at        Int?
  token_type        String?
  scope             String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  username      String?   @unique
  image         String?
  
  hashedPassword String?
  
  emailVerified DateTime? 

  Account       Account[]
  Application   Application[]
  Resume        Resume[]
  memberships   CompanyMember[]
  ownedCompany  Company?      @relation("CompanyOwner")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  coverImage  String?
  description String
  image       String?
  location    String
  slug        String   @unique
  websiteUrl  String?

  plan        String   @default("free")
  
  ownerId     String   @unique
  owner       User     @relation("CompanyOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  stripeCustomerId String? @unique

  Job      Job[]
  Question Question[]
  members  CompanyMember[]
}

model CompanyMember {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
}

model Job {
  id               String          @id @default(cuid())
  title            String
  summary          String
  companyId        String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  department       String
  experienceLevel  ExperienceLevel
  status           JobStatus       @default(DRAFT)
  jobType          JobType
  location         String
  salaryMax        Int?
  salaryMin        Int?
  benefits         String[]
  qualifications   String[]
  responsibilities String[]
  skills           String[]
  workArrangement  WorkArrangement @default(ON_SITE)
  workSchedule     String?

  Application   Application[]
  Company       Company         @relation(fields: [companyId], references: [id])
  QuestionOnJob QuestionOnJob[]
}

model Application {
  id                String              @id @default(cuid())
  userId            String
  jobId             String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  status            ApplicationStatus   @default(SUBMITTED)
  resumeId          String

  Job               Job                 @relation(fields: [jobId], references: [id])
  Resume            Resume              @relation(fields: [resumeId], references: [id])
  User              User                @relation(fields: [userId], references: [id])
  ApplicationAnswer ApplicationAnswer[]

  @@unique([userId, jobId])
}

model Resume {
  id          String        @id @default(cuid())
  name        String
  userId      String
  url         String
  createdAt   DateTime      @default(now())
  deletedAt   DateTime?

  Application Application[]
  User        User          @relation(fields: [userId], references: [id])
}

model Question {
  id        String           @id @default(cuid())
  question  String
  companyId String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  type      QuestionTypeEnum
  options   String[]

  ApplicationAnswer ApplicationAnswer[]
  Company           Company             @relation(fields: [companyId], references: [id])
  QuestionOnJob     QuestionOnJob[]
}

model ApplicationAnswer {
  id            String      @id @default(cuid())
  answer        String[]
  applicationId String
  questionId    String

  Application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  Question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([applicationId, questionId])
}

model QuestionOnJob {
  jobId      String
  questionId String
  order      Int      @default(0)
  isRequired Boolean  @default(true)

  Job        Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  Question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([jobId, questionId])
}




enum TeamRole {
  ADMIN
  RECRUITER
  HIRING_MANAGER
  MEMBER
}

enum JobStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ApplicationStatus {
  SUBMITTED
  IN_REVIEW
  INTERVIEWING
  OFFERED
  REJECTED
  WITHDRAWN
  HIRED
}

enum ExperienceLevel {
  INTERNSHIP
  ENTRY_LEVEL
  ASSOCIATE
  MID_LEVEL
  SENIOR
  STAFF
  PRINCIPAL
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum QuestionTypeEnum {
  TEXT
  MULTIPLE_CHOICE
  NUMBER
  CHECKBOX
  TRUE_OR_FALSE
}

enum WorkArrangement {
  ON_SITE
  HYBRID
  REMOTE
}